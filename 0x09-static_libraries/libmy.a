!<arch>
0-isupper.o/    0           0     0     644     325       `
#include"main.h"

/**

 * main - Entry point
 
 * description: Checks if a character is uppercase
 
 * Return: Always 0.
 
 */
 
int _isupper(int c)

/**

 * description: Checks if a character is uppercase
 
 * @c a character inputed by the user
 
 **/
 
{

if (isupper(c) != 0)

{

return (1);

}

else

{

return (0);

}

}
0-memset.o/     0           0     0     644     426       `
#include"main.h"

/**

 * _memset -  fills the first n bytes of the memory area
 
* pointed to by s with the constant byte b

 * @s: points to new memory area
 
 * @b : constant byte
 
* @n: Number of bytes for memory area to occupy

 * Return: A pointer to the destination string @dest.
 
 */
 
char *_memset(char *s, char b, unsigned int n)

{

unsigned int i;

for (i = 0; n > 0; i++)

{

s[i] = b;

n--;

}

return (s);

}0-strcat.o/     0           0     0     644     365       `
#include"main.h"

/**

 * _strcpy - appends a string pointed to by @src, including the
 
 * terminating null byte, to a buffer pointed to by @dest.
 
 * @dest: A buffer to copy the string to.
 
 * @src: The source string to copy.
 
 * Return: A pointer to the destination string @dest.
 
 */
 
char *_strcat(char *dest, char *src)

{

return (strcat(dest, src));

}
100-atoi.o/     0           0     0     644     561       `
#include "main.h"

/**

 * _atoi - converts a string to an integer.
 
 * @s: input string.
 
 * Return: integer.
 
 */
 
int _atoi(char *s)

{

unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

while (*(s + count) != '\0')

{

if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))

break;

if (*(s + count) == '-')

pn *= -1;

if ((*(s + count) >= '0') && (*(s + count) <= '9'))

{

if (size > 0)

m *= 10;

size++;

}

count++;

}

for (i = count - size; i < count; i++)

{

oi = oi + ((*(s + i) - 48) * m);

m /= 10;

}

return (oi *pn);

}


1-isdigit.o/    0           0     0     644     238       `
#include"main.h"

/**

 * main - Entry point
 
 * description: Checks if a character is uppercase
 
 * @c a character inputed by the user
 
 **/
 
int _isdigit(int c)

{

if (isdigit(c) != 0)

{

return (1);

}

else

{

return (0);

}

}1-memcpy.o/     0           0     0     644     437       `
#include"main.h"

/**

 * _memcpy -  copies n bytes from a memory area
 
 * and copies it to the destination meory area
 
 * @dest: \memory adress being copied to
 
 * @src: Memory adress to copy from
 
 * @n: Number of bytes to copy
 
 * Return: A pointer to the destination string @dest.
 
*/

char *_memcpy(char *dest, char *src, unsigned int n)

{

unsigned int i;

for (i = 0; i < n; i++)

{

dest[i] = src[i];

}

return (dest);

}
1-strncat.o/    0           0     0     644     428       `
#include "main.h"

/**

 * _strncat- appends a string pointed to by @src, including the
 
 * terminating null byte, to a buffer pointed to by @dest using n bytes.
 
 * @dest: A buffer to copy the string to.
 
 * @src: The source string to copy.
 
 * @n the number of bytes to copy
 
 * Return: A pointer to the destination string @dest.
 
 */
 
char *_strncat(char *dest, char *src, int n)

{

return (strncat(dest, src, n));

}2-strchr.o/     0           0     0     644     495       `
#include"main.h"

/**

 * _strchr - Returns a pointer to the first occurrence of the character c
 
 * in the string s , or NULL if the character is not found
 
 * @s: \memory adress being copied to
 
 * @c: Memory adress to copy from
 
 * Return: First occurence of C
 
 */
 
char *_strchr(char *s, char c)

{

int i;

char *q;

int f;

f = 0;

for (i = 0; s[i] != '\0'; i++)

{

if (c == s[i])

{

q = &s[i];

return (q);

f = 1;

break;

}

}

if (f == 0)

{

return (NULL);

}

return (0);

}
2-strlen.o/     0           0     0     644     245       `
#include"main.h"

/**

 * _strlen() - Entry point
 
 * description: returns the length of a string
 
 * @s points to the string we want to find the length of
 
 **/
 
int _strlen(char *s)

{

int length;

length = strlen(s);

return (length);

}
2-strncpy.o/    0           0     0     644     429       `
#include "main.h"

/**

 * _strncpy- copies a string pointed to by @src, including the
 
 * terminating null byte, to a buffer pointed to by @dest using n bytes.
 
 * @dest: A buffer to copy the string to.
 
 * @src: The source string to copy.
 
 * @n the number of bytes to copy
 
 * Return: A pointer to the destination string @dest.
 
 */
 
char *_strncpy(char *dest, char *src, int n)

{

return (strncpy(dest, src, n));

}


3-islower.o/    0           0     0     644     342       `
#include"main.h"

/**

 * main - check the code
 
 * description: Prints the alphabet in lowercase
 
 * Return: Always 0.
 
 */
 
int _islower(int c)

/**

 * description: Prints the alphabet in lowercase
 
 * Parameter description: a character inputed by the user
 
**/

{

if (islower(c) != 0)

{

return (1);

}

else

{

return (0);

}

}3-puts.o/       0           0     0     644     194       `
#include"main.h"

/**

 * _puts() - Entry point
 
 * description: returns the length of a string
 
 * @str points to the string we want to output
 
 **/
 
void _puts(char *str)

{

puts(str);

}3-strcmp.o/     0           0     0     644     291       `
#include"main.h"

/**

 * _strcmp - 0, if the s1 = s2 .a negative value if s1 < s2
 
 * a positive value if s1 > s2.
 
 * @s1 first string
 
 * @s2 second string
 
 * Return: A positive number, a negative number or zero
 
 */
 
int _strcmp(char *s1, char *s2)

{

return (strcmp(s1, s2));

}
3-strspn.o/     0           0     0     644     605       `
#include"main.h"

/**

 * _strspn -  the length of the initial segment of s
 
 * which consists entirely of bytes in accept.
 
 * @s: The strng being checked
 
 * @accept: Valid characters
 
 * Return: Length of initial segment
 
 */
 
unsigned int _strspn(char *s, char *accept)

{

int i, j, length;

int f, q;

length = strlen(accept) - 1;

q = 0;

f = 0;

for (i = 0; s[i] != '\0'; i++)

{

for (j = 0; accept[j] != '\0'; j++)

{

if (accept[j] == s[i])

{

f++;

break;

}

else if (j == length && accept[j] != s[i])

{

return (f);

q = 1;

break;

}

}

if (q == 1)

{

break;

}

}

return (0);

}
4-isalpha.o/    0           0     0     644     344       `
#include"main.h"

/**

 * main - check the code
 
 * description: Prints the alphabet in lowercase
 
 * Return: Always 0.
 
 */
 
int _isalpha(int c)

/**

 * description: Prints the alphabet in lowercase
 
 * Parameter description: a character inputed by the user
 
 **/
 
{

if (isalpha(c) != 0)

{

return (1);

}

else

{

return (0);

}

}4-strpbrk.o/    0           0     0     644     587       `
#include"main.h"

/**

 * _strpbrk - Returns a pointer to the first occurrence of any bytes
 
 * in the string accept , or NULL if no string is found
 
 * @s: String being checked
 
 * @accept: Valid characters
 
 * Return: First occurence of string with valid characters
 
 */
 
char *_strpbrk(char *s, char *accept)

{

int i, k;

char *q;

int f;

f = 0;

for (i = 0; s[i] != '\0'; i++)

{

for (k = 0; accept[k] != '\0'; k++)

{

if (accept[k] == s[i])

{

q = &s[i];

return (q);

f = 1;

break;

}

}

if (f == 1)

{

break;

}

}

if (f == 0)

{

return (NULL);

}

return (0);

}
5-strstr.o/     0           0     0     644     619       `
#include "main.h"

#include <stdio.h>

/**

 * *_strstr - a function that locates a substring
 
 * or returns NULL if not found
 
 * @haystack: string
 
 * @needle: substring being located
 
 * Return: pointer to begining of string
 
 */
 
char *_strstr(char *haystack, char *needle)

{

int i, j, len, f;

char *q;

f = 0;

len = strlen(needle) - 1;

for (i = 0; haystack[i] > '\0'; i++)

{

for (j = 0; needle[j] > '\0'; j++)

{

if (haystack[i] != needle[j])

{

break;

}

}

if (needle[len] == haystack[i])

{

q = &haystack[i - (len)];

return (q);

f = 1;

break;

}

if (f == 1)

{

break;

}

}

return (0);

}
6-abs.o/        0           0     0     644     177       `
#include"main.h"

/**

 *main - entry point
 
 *Description: Prints absolute value of a number
 
 *Return: Always return zero(0)
 
 **/
 
int _abs(int n)

{

return (abs(n));

}
9-strcpy.o/     0           0     0     644     393       `
#include "main.h"

#include <stdio.h>

/**

 * _strcpy - Copies a string pointed to by @src, including the
 
 *           terminating null byte, to a buffer pointed to by @dest.
 
 * @dest: A buffer to copy the string to.
 
 * @src: The source string to copy.
 
 * Return: A pointer to the destination string @dest.
 
 */
 
char *_strcpy(char *dest, char *src)

{

return strcpy(dest, src);

}
_putchar.o/     0           0     0     644     273       `
#include <unistd.h>















/**







 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
  */
 
int _putchar(char c)
{
  return (write(1, &c, 1));
  }
